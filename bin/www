#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
//SyncData
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//SyncData
var numOfUers = 0;
io.on('connection',(socket)=>{
    
    console.log('come in connection')
    var addedUser = false;
    
    /**add user**/
    //when the client emits 'add user',this listens and executes
    socket.on('add user',(username)=>{

        //?
        console.log("add user: ", username);
        if(addedUser) return;
        
        //we store the username in the socket session for this client
        socket.username = username;
        ++numOfUers;
        addedUser = true;
        socket.emit('login',{
            numOfUers:numOfUers
        });

        //broadcast all clients that a person has connected
        socket.broadcast.emit('user joined',{
            username:socket.username,
            numOfUers:numOfUers
        });
    });


    /**editting**/
    //when the client emits 'editting',server broadcast it to others
    socket.on('editting',()=>{
        socket.broadcast.emit('editting',{
            username:socket.username
        });
    });

    /**stop editting**/
    //when the client emits 'stop editting', server broadcast it to others
    socket.on('stop editting',()=>{
        socket.broadcast.emit('stop editting',{
            username:socket.username
        });
    });

    /**update data**/
    //when the client emits 'update data',this listen and executes
    socket.on('update data',(data)=>{
        //server will broadcast to all client to execute 'update data'
        socket.broadcast.emit('update data',{
            username: socket.username,
            message:data
        });
    });

    /**disconnection**/
    //when the user disconnection,server broadcast to all the clients
    socket.on('disconnection',()=>{
        if(addedUser){
            --numOfUers;

        //broadcast to all the client
        socket.broadcast.emit('user left',{
            username:socket.username,
            numOfUers:numOfUers
        });
        }
    });

});